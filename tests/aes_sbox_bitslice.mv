op #lsr : w16 -> w16 -> w16
end

op #lsl : w16 -> w16 -> w16
end

op #rol : w16 -> w16 -> w16
end

proc SHIFT1:
  inputs: w8 a[0:3]
  outputs: w8 b[0:3];

  b0 := a3;
  b[1:3] := a[0:2];
end

proc SHIFT2:
  inputs: w8 a[0:3]
  outputs: w8 b[0:3];

  b[0:1] := a[2:3];
  b[2:3] := a[0:1];
end

sni proc AND:
  inputs: w16 a[0:3], w16 b[0:3]
  outputs: w16 c[0:3]
  shares: w16 ab[0:3], w16 sb[0:3], w16 sa[0:3], w16 sr[0:3]
  randoms: w16 r[0:3], w16 r';

  ab = a &w16 b;      
  c   = ![ab ^w16 r]; 
  sb  = SHIFT1(b);
  ab := a &w16 sb;
  c   = ![c ^w16 ab];
  sa  = SHIFT1(a);
  ab := sa &w16 b;
  c   = ![c ^w16 ab];
  sr  = SHIFT1(r);
  c   = ![c ^w16 sr];
  sb  = SHIFT2(b);
  ab := a &w16 sb;
  c   = ![c ^w16 ab];
  c   = ![c ^w16 [r',r',r',r']];
end

proc SUBBYTES:
  inputs: 
    w16 U0[0:3], 
    w16 U1[0:3], 
    w16 U2[0:3], 
    w16 U3[0:3], 
    w16 U4[0:3], 
    w16 U5[0:3], 
    w16 U6[0:3], 
    w16 U7[0:3]
  outputs: 
    w16 S0[0:3], 
    w16 S1[0:3], 
    w16 S2[0:3], 
    w16 S3[0:3], 
    w16 S4[0:3], 
    w16 S5[0:3], 
    w16 S6[0:3], 
    w16 S7[0:3]

  shares: 
    w16 y14_ [0:3],
    w16 y13_ [0:3], 
    w16 y9_  [0:3],
    w16 y8_  [0:3],
    w16 t0  [0:3],
    w16 y1_  [0:3],
    w16 y4  [0:3],
    w16 y12 [0:3],
    w16 y2  [0:3],
    w16 y5  [0:3],
    w16 y3  [0:3],
    w16 t1  [0:3],
    w16 y15 [0:3],
    w16 y20_ [0:3],
    w16 y6  [0:3],
    w16 y10 [0:3],
    w16 y11 [0:3],
    w16 y7  [0:3],
    w16 y17 [0:3],
    w16 y19 [0:3],
    w16 y16 [0:3],
    w16 y21_ [0:3],
    w16 y18 [0:3],
    w16 t2  [0:3],
    w16 t3_  [0:3],
    w16 t4_  [0:3],
    w16 t5  [0:3],
    w16 t6  [0:3],
    w16 t7  [0:3],
    w16 t8  [0:3],
    w16 t9  [0:3],
    w16 t10_ [0:3],
    w16 t11_ [0:3],
    w16 t12_ [0:3],
    w16 t13_ [0:3],
    w16 t14 [0:3],
    w16 t15 [0:3],
    w16 t16 [0:3],
    w16 t17 [0:3],
    w16 t18 [0:3],
    w16 t19 [0:3],
    w16 t20_ [0:3],
    w16 t21_ [0:3],
    w16 t22_ [0:3],
    w16 t23_ [0:3],
    w16 t24 [0:3],
    w16 t25 [0:3],
    w16 t26 [0:3],
    w16 t27 [0:3],
    w16 t28 [0:3],
    w16 t29 [0:3],
    w16 t30 [0:3],
    w16 t31 [0:3],
    w16 t32 [0:3],
    w16 t33 [0:3],
    w16 t34 [0:3],
    w16 t35 [0:3],
    w16 t36 [0:3],
    w16 t37 [0:3],
    w16 t38 [0:3],
    w16 t39 [0:3],
    w16 t40 [0:3],
    w16 t41 [0:3],
    w16 t42 [0:3],
    w16 t43 [0:3],
    w16 t44 [0:3],
    w16 t45 [0:3],
    w16 z0  [0:3],
    w16 z1_  [0:3],
    w16 z2  [0:3],
    w16 z3  [0:3],
    w16 z4  [0:3],
    w16 z5  [0:3],
    w16 z6  [0:3],
    w16 z7  [0:3],
    w16 z8  [0:3],
    w16 z9  [0:3],
    w16 z10 [0:3],
    w16 z11 [0:3],
    w16 z12 [0:3],
    w16 z13 [0:3],
    w16 z14 [0:3],
    w16 z15 [0:3],
    w16 z16 [0:3],
    w16 z17 [0:3], 
    w16 tc1_ [0:3],
    w16 tc2_ [0:3],
    w16 tc3 [0:3],
    w16 tc4 [0:3],
    w16 tc5 [0:3],
    w16 tc6 [0:3],
    w16 tc7 [0:3],
    w16 tc8 [0:3],
    w16 tc9 [0:3],
    w16 tc10[0:3],
    w16 tc11[0:3],
    w16 tc12[0:3],
    w16 tc13[0:3],
    w16 tc14[0:3],
        
    w16 tc16[0:3],
    w16 tc17[0:3],
    w16 tc18[0:3],
        
    w16 tc20[0:3],
    w16 tc21[0:3],
    w16 tc26[0:3];


    y14_  =![ U3 ^w16 U5];         (* U3 + U5 *)
    y13_  =![ U0 ^w16 U6];         (* U0 + U6 *)
    y9_   =![ U0 ^w16 U3];         (* U0 + U3 *)
    y8_   =![ U0 ^w16 U5];         (* U0 + U5 *)
    t0    := U1 ^w16 U2;           (* U1 + U2 *)
    y1_   =![ t0 ^w16 U7];         (* U1 + U2 + U7 *)
    y4    =![ y1_ ^w16 U3];        (* U1 + U2 + U7 + U3 *)
    y12   =![ y13_ ^w16 y14_];     (* U0 + U6 + U3 + U5 *) 
    y2    =![ y1_ ^w16 U0];        (* U1 + U2 + U7 + U0 *)
    y5    =![ y1_ ^w16 U6];        (* U1 + U2 + U7 + U6 *)
    y3    =![y5 ^w16 y8_];         (* U1 + U2 + U7 + U6 + U0 + U5 *)
    t1    := U4 ^w16 y12;          (* U4 + U1 + U2 + U7 + U3 *)
    y15   =![t1 ^w16 U5];          (* U4 + U1 + U2 + U7 + U3 + U5 *)
    y20_  := t1 ^w16 U1;           (* U4 + U1 + U2 + U7 + U3 + U1 = U4 + U2 + U7 + U3 *)
    y6    =![ y15 ^w16 U7];        (* U4 + U1 + U2 + U7 + U3 + U5 + U7 = U4 + U1 + U2 + U3 + U5 *)
    y10   =![ y15 ^w16 t0];        (* U4 + U1 + U2 + U7 + U3 + U5 + U1 + U2 = U4 + U7 + U3 + U5 *)
    y11   =![ y20_ ^w16 y9_];      (* U4 + U2 + U7 + U3 + U0 + U3 = U4 + U2 + U7 + U0 *)
    y7    =![ U7 ^w16 y11];        (* U7 + U4 + U2 + U7 + U0 = U4 + U2 + U0 *)
    y17   =![ y10 ^w16 y11];       (* U4 + U7 + U3 + U5 + U4 + U2 + U7 + U0 = U3 + U5 + U2 + U0 *)
    y19   := y10 ^w16 y8_;         (* U4 + U7 + U3 + U5 + U0 + U5 = U4 + U7 + U3 + U0 *)
    y16   =![ t0 ^w16 y11];        (* U1 + U2 + U4 + U2 + U7 + U0 = U1 + U4 + U7 + U0 *)
    y21_  := y13_ ^w16 y16;        (* U0 + U6 + U1 + U4 + U7 + U0 = U6 + U1 + U4 + U7 *)
    y18   := U0 ^w16 y16;          (* U0 + U1 + U4 + U7 + U0 = U1 + U4 + U7 *)
                                   (*
    t2    = AND(y12, y15);         (*   (U0 + U6 + U3 + U5) * (U4 + U1 + U2 + U7 + U3 + U5) 
    t3_   = AND(y3, y6);           (*   (U1 + U2 + U7 + U6 + U0 + U5) * (U4 + U1 + U2 + U3 + U5)
    t4_   := t3_ ^w16 t2;          (*   
    t5    = AND(y4, U7);           (*   (U1 + U2 + U7 + U3) * U7 = (U1 + U2 + U3) * U7 + U7 *)
    t6    := t5 ^w16 t2;           (*
    t7    = AND(y13_, y16);        (*   (U0 + U6) * (U1 + U4 + U7 + U0) = (U0 + U6) * (U1 + U4 + U7) + (U0 + U6) * U0 = (U0 + U6) * (U1 + U4 + U7) + (1 + U6) * U0 *)
    t8    = AND(y5, y1_);          (*   (U1 + U2 + U7 + U6)(U1 + U2 + U7) = (1 + U6) * (U1 + U2 + U7)
    t9    := t8 ^w16 t7;           (*   (U0 + U6) * (U1 + U4 + U7) + (1 + U6) * U0 + (1 + U6) * (U1 + U2 + U7) = (U0 + U6) * (U1 + U4 + U7) + (1 + U6) * (U0 + U1 + U2 + U7)  *)
    t10_  = AND(y2, y7);           (*   (U1 + U2 + U7 + U0) * (U4 + U2 + U0) = (U0 + U2 + U1 + U7) * (U0 + U2 + U4) = (U0 + U2) + (U0+U2)U4 + (U1+U7)(U0+U2) + (U1+U7)*U4 
                                                                                                                    = (U0 + U2) (1 + U4 + U1 + U7) + (U1+U7)*U4  *)
    t11_  := t10_ ^w16 t7;         (*  (U0 + U6) * (U1 + U4 + U7) + (1 + U6) * U0 +  (U0 + U2) (1 + U4 + U1 + U7) + (U1+U7)*U4
    t12_  = AND(y9_, y11);         (*
    t13_  = AND(y14_, y17);        (*
    t14   := t13_ ^w16 t12_;       (*
    t15   = AND(y8_, y10);         (*
    t16   := t15 ^w16 t12_;        (*
    t17   := t4_ ^w16 y20_;        (*
    t18   := t6 ^w16 t16;          (*
    t19   := t9 ^w16 t14;          (*
    t20_  := t11_ ^w16 t16;        (*
    t21_  =![ t17 ^w16 t14];       (*
    t22_  := t18 ^w16 y19;         (*
    t23_  =![ t19 ^w16 y21_];      (*
    t24   =![ t20_ ^w16 y18];      (*
    t25   =![ t21_ ^w16 t22_];     (*
    t26   = AND(t21_, t23_);       (*
    t27   =![ t24 ^w16 t26];       (*
    t28   = AND(t25, t27);         (*
    t29   =![ t28 ^w16 t22_];      (*
    t30   =![ t23_ ^w16 t24];      (*
    t31   =![ t22_ ^w16 t26];      (*
    t32   = AND(t31, t30);         (*
    t33   =![ t32 ^w16 t24];       (*
    t34   := t23_ ^w16 t33;        (*
    t35   =![ t27 ^w16 t33];       (*
    t36   = AND(t24, t35);         (*
    t37   =![ t36 ^w16 t34];       (*
    t38   =![ t27 ^w16 t36];       (*
    t39   = AND(t29, t38);         (*
    t40   =![ t25 ^w16 t39];       (*
    t41   =![ t40 ^w16 t37];       (*
    t42   =![ t29 ^w16 t33];       (*
    t43   =![ t29 ^w16 t40];       (*
    t44   =![ t33 ^w16 t37];       (*
    t45   =![ t42 ^w16 t41];       (*
    z0    = AND(t44, y15);         (*
    z1_   = AND(t37, y6);          (*
    z2    = AND(t33, U7);          (*
    z3    = AND(t43, y16);         (*
    z4    = AND(t40, y1_);         (*
    z5    = AND(t29, y7);          (*
    z6    = AND(t42, y11);         (*
    z7    = AND(t45, y17);         (*
    z8    = AND(t41, y10);         (*
    z9    = AND(t44, y12);         (*
    z10   = AND(t37, y3);          (*
    z11   = AND(t33, y4);          (*
    z12   = AND(t43, y13_);        (*
    z13   = AND(t40, y5);          (*
    z14   = AND(t29, y2);          (*
    z15   = AND(t42, y9_);         (*
    z16   = AND(t45, y14_);        (*
    z17   = AND(t41, y8_);         (*
    tc1_  := z15 ^w16 z16;
    tc2_  := z10 ^w16 tc1_;
    tc3   := z9 ^w16 tc2_;
    tc4   := z0 ^w16 z2;
    tc5   := z1_ ^w16 z0;
    tc6   := z3 ^w16 z4;
    tc7   := z12 ^w16 tc4; 
    tc8   := z7 ^w16 tc6;
    tc9   := z8 ^w16 tc7;
    tc10  := tc8 ^w16 tc9; 
    tc11  := tc6 ^w16 tc5;
    tc12  := z3 ^w16 z5;
    tc13  := z13 ^w16 tc1_;
    tc14  := tc4 ^w16 tc12; 
    S3    := tc3 ^w16 tc11;
    tc16  := z6 ^w16 tc8;
    tc17  := z14 ^w16 tc10;
    tc18  := tc13 ^w16 tc14;
    S7    := z12 ^w16 tc18; 
    tc20  := z15 ^w16 tc16;
    tc21  := tc2_ ^w16 z11; 
    S0    := tc3 ^w16 tc16;
    S6    := tc10 ^w16 tc18;
    S4    := tc14 ^w16 S3;
    S1    := S3 ^w16 tc16;
    tc26  := tc17 ^w16 tc20;
    S2    := tc26 ^w16 z17;
    S5    := tc21 ^w16 tc17; 
end


proc SHIFTROW:
  inputs: w16 S[0:3]
  output: w16 R[0:3];

  R =![      (S &w16 (0xF000:w16)) ^w16 
        (#lsr(S &w16 (0x0800:w16), (0x3:w16))) ^w16 
        (#lsl(S &w16 (0x0700:w16), (0x1:w16))) ^w16
        (#lsl(S &w16 (0x0030:w16), (0x2:w16))) ^w16 
        (#lsr(S &w16 (0x00C0:w16), (0x2:w16))) ^w16 
        (#lsr(S &w16 (0x000E:w16), (0x1:w16))) ^w16
        (#lsl(S &w16 (0x0001:w16), (0x3:w16))) ] ;
end

proc SHIFTROWS:
  inputs: 
    w16 U0[0:3], 
    w16 U1[0:3], 
    w16 U2[0:3], 
    w16 U3[0:3], 
    w16 U4[0:3], 
    w16 U5[0:3], 
    w16 U6[0:3], 
    w16 U7[0:3]
  outputs: 
    w16 S0[0:3], 
    w16 S1[0:3], 
    w16 S2[0:3], 
    w16 S3[0:3], 
    w16 S4[0:3], 
    w16 S5[0:3], 
    w16 S6[0:3], 
    w16 S7[0:3];

  S0 = SHIFTROW(U0);
  S1 = SHIFTROW(U1);
  S2 = SHIFTROW(U2);
  S3 = SHIFTROW(U3);
  S4 = SHIFTROW(U4);
  S5 = SHIFTROW(U5);
  S6 = SHIFTROW(U6);
  S7 = SHIFTROW(U7);
end

proc MIXCOLUMNS:
  inputs: 
    w16 U0[0:3], 
    w16 U1[0:3], 
    w16 U2[0:3], 
    w16 U3[0:3], 
    w16 U4[0:3], 
    w16 U5[0:3], 
    w16 U6[0:3], 
    w16 U7[0:3]
  outputs: 
    w16 S0[0:3], 
    w16 S1[0:3], 
    w16 S2[0:3], 
    w16 S3[0:3], 
    w16 S4[0:3], 
    w16 S5[0:3], 
    w16 S6[0:3], 
    w16 S7[0:3]
  shares:
    w16 r0_ [0:3], 
    w16 r1_ [0:3], 
    w16 r2 [0:3], 
    w16 r3 [0:3], 
    w16 r4 [0:3], 
    w16 r5 [0:3], 
    w16 r6 [0:3], 
    w16 r7 [0:3], 
    w16 r8 [0:3], 
    w16 r9 [0:3], 
    w16 r10[0:3], 
    w16 r11[0:3], 
    w16 r12[0:3], 
    w16 r14[0:3];

    r0_ := U7; r2 := U2; r9 := U3; r3 := U1;
    r12 := U6; r4 := U4; r14 := U5; r1_ := U0;

    r11 := r0_ ^w16 #rol(r0_, (0x4:w16));
    r10 := r2 ^w16 #rol(r2, (0x4:w16));
    r7 := r9 ^w16 #rol(r9, (0x4:w16));
    r9 := r9 ^w16 #rol(r10, (0xC:w16));
    r9 := r9 ^w16 #rol(r7, (0x4:w16));
    r8 := r3 ^w16 #rol(r3, (0x4:w16));
    r3 := r3 ^w16 #rol(r7, (0xC:w16));
    r7 := r12 ^w16 #rol(r12, (0x4:w16));
    r6 := r4 ^w16 #rol(r4, (0x4:w16));
    r4 := r4 ^w16 #rol(r7, (0xC:w16));
    r5 := r14 ^w16 #rol(r14, (0x4:w16));
    r14 := r14 ^w16 #rol(r6, (0xC:w16));
    r6 := r4 ^w16 #rol(r6, (0x4:w16));
    r4 := r1_ ^w16 #rol(r1_, (0x4:w16));
    r0_ := r0_ ^w16 #rol(r4, (0xC:w16));
    r2 := r2 ^w16 #rol(r11, (0xC:w16));
    r2 := r2 ^w16 #rol(r4, (0xC:w16));
    r12 := r12 ^w16 #rol(r8, (0xC:w16));
    r3 := r3 ^w16 #rol(r4, (0xC:w16));
    r1_ := r1_ ^w16 #rol(r5, (0xC:w16));
    r12 := r12 ^w16 #rol(r4, (0xC:w16));
    r5 := r14 ^w16 #rol(r5, (0x4:w16));
    r4 := r1_ ^w16 #rol(r4, (0x4:w16));
    r8 := r3 ^w16 #rol(r8, (0x4:w16));
    r7 := r12 ^w16 #rol(r7, (0x4:w16));
    r11 := r0_ ^w16 #rol(r11, (0x4:w16));
    r10 := r2 ^w16 #rol(r10, (0x4:w16));

    S0 = ![#rol(r4, (0x4:w16))];
    S2 = ![#rol(r5, (0x4:w16))];
    S4 = ![#rol(r6, (0x4:w16))];
    S6 = ![#rol(r7, (0x4:w16))];
    S1 = ![#rol(r8, (0x4:w16))];
    S3 = ![#rol(r9, (0x4:w16))];
    S5 = ![#rol(r10, (0x4:w16))];
    S7 = ![#rol(r11, (0x4:w16))];
end

proc ADDROUNDKEY:
  inputs:  
    w16 U0[0:3], 
    w16 U1[0:3], 
    w16 U2[0:3], 
    w16 U3[0:3], 
    w16 U4[0:3], 
    w16 U5[0:3], 
    w16 U6[0:3], 
    w16 U7[0:3],
    w16 K0[0:3], 
    w16 K1[0:3], 
    w16 K2[0:3], 
    w16 K3[0:3], 
    w16 K4[0:3], 
    w16 K5[0:3], 
    w16 K6[0:3], 
    w16 K7[0:3]
  outputs: 
    w16 S0[0:3], 
    w16 S1[0:3], 
    w16 S2[0:3], 
    w16 S3[0:3], 
    w16 S4[0:3], 
    w16 S5[0:3], 
    w16 S6[0:3], 
    w16 S7[0:3];

   S0 = ![U0 ^w16 K0];
   S1 = ![U1 ^w16 K1];
   S2 = ![U2 ^w16 K2];
   S3 = ![U3 ^w16 K3];
   S4 = ![U4 ^w16 K4];
   S5 = ![U5 ^w16 K5];
   S6 = ![U6 ^w16 K6];
   S7 = ![U7 ^w16 K7];
end

proc ROUND:
  inputs:
    w16 U0[0:3], 
    w16 U1[0:3], 
    w16 U2[0:3], 
    w16 U3[0:3], 
    w16 U4[0:3], 
    w16 U5[0:3], 
    w16 U6[0:3], 
    w16 U7[0:3],
    w16 K0_0[0:3], 
    w16 K1_0[0:3], 
    w16 K2_0[0:3], 
    w16 K3_0[0:3], 
    w16 K4_0[0:3], 
    w16 K5_0[0:3], 
    w16 K6_0[0:3], 
    w16 K7_0[0:3],
    w16 K0_1[0:3], 
    w16 K1_1[0:3], 
    w16 K2_1[0:3], 
    w16 K3_1[0:3], 
    w16 K4_1[0:3], 
    w16 K5_1[0:3], 
    w16 K6_1[0:3], 
    w16 K7_1[0:3],
    w16 K0_2[0:3], 
    w16 K1_2[0:3], 
    w16 K2_2[0:3], 
    w16 K3_2[0:3], 
    w16 K4_2[0:3], 
    w16 K5_2[0:3], 
    w16 K6_2[0:3], 
    w16 K7_2[0:3]
  outputs: 
    w16 S0[0:3], 
    w16 S1[0:3], 
    w16 S2[0:3], 
    w16 S3[0:3], 
    w16 S4[0:3], 
    w16 S5[0:3], 
    w16 S6[0:3], 
    w16 S7[0:3];

  (S0,S1,S2,S3,S4,S5,S6,S7) = ADDROUNDKEY(U0,U1,U2,U3,U4,U5,U6,U7, 
                                          K0_0,K1_0,K2_0,K3_0,K4_0,K5_0,K6_0,K7_0);
  (S0,S1,S2,S3,S4,S5,S6,S7) = SUBBYTES(S0,S1,S2,S3,S4,S5,S6,S7);
  (S0,S1,S2,S3,S4,S5,S6,S7) = SHIFTROWS(S0,S1,S2,S3,S4,S5,S6,S7);
  (S0,S1,S2,S3,S4,S5,S6,S7) = MIXCOLUMNS(S0,S1,S2,S3,S4,S5,S6,S7);

  (S0,S1,S2,S3,S4,S5,S6,S7) = ADDROUNDKEY(S0,S1,S2,S3,S4,S5,S6,S7, 
                                          K0_0,K1_0,K2_0,K3_0,K4_0,K5_0,K6_0,K7_0);
  (S0,S1,S2,S3,S4,S5,S6,S7) = SUBBYTES(S0,S1,S2,S3,S4,S5,S6,S7);
  (S0,S1,S2,S3,S4,S5,S6,S7) = SHIFTROWS(S0,S1,S2,S3,S4,S5,S6,S7);
  (S0,S1,S2,S3,S4,S5,S6,S7) = MIXCOLUMNS(S0,S1,S2,S3,S4,S5,S6,S7);

(*  (S0,S1,S2,S3,S4,S5,S6,S7) = ADDROUNDKEY(S0,S1,S2,S3,S4,S5,S6,S7, 
                                          K0_2,K1_2,K2_2,K3_2,K4_2,K5_2,K6_2,K7_2);
  (S0,S1,S2,S3,S4,S5,S6,S7) = SUBBYTES(S0,S1,S2,S3,S4,S5,S6,S7);
  (S0,S1,S2,S3,S4,S5,S6,S7) = SHIFTROWS(S0,S1,S2,S3,S4,S5,S6,S7);
  (S0,S1,S2,S3,S4,S5,S6,S7) = MIXCOLUMNS(S0,S1,S2,S3,S4,S5,S6,S7); *)


end

(* para Probing ROUND *)
para Probing SUBBYTES


(*
   0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
   
   0 8
   1 9
   2
   3
   4
   5
   6
   7

key_exp :
  K[0][i] := S[i]

  for r = 1 to 10 do
    a = sbox(K[r-1][13])      i.e col 13            for i = 0 to 7 do tmp1[i] = K[r-1][i] & 0x000F; done;
    b = sbox(K[r-1][14])      i.e col 14            tmp = SUBBYTE(tmp1); 
    c = sbox(K[r-1][15])      i.e col 15
    d = sbox(K[r-1][12])      i.e col 12   
 
    a = a ^ Rcon[r];                                
    K[r][0] = K[r-1][0] ^ a;                        for i = 0 to 7 do K[r][i] = K[r-1] ^ (tmp[i] << 13) ^ ((tmp[i] << 9) & 0x1000); // FIXME a = a ^ Rcon[r]
    K[r][1] = K[r-1][1] ^ b;                        
    K[r][2] = K[r-1][2] ^ c;                        
    K[r][3] = K[r-1][3] ^ c;              
                                          
    for i=1 to 3 do                                            for i = 1 to 3 do
      K[r][i*4 + 0] = K[r-1][i*4 + 0] ^ K[r][(i-1)*4 + 0];        for j = 0 to 7 do K[r][j] = K[r][j] ^ (K[r-1][j] ^ (0xF000 >> (i-1)))
      K[r][i*4 + 1] = K[r-1][i*4 + 1] ^ K[r][(i-1)*4 + 1];     
      K[r][i*4 + 2] = K[r-1][i*4 + 2] ^ K[r][(i-1)*4 + 2];
      K[r][i*4 + 3] = K[r-1][i*4 + 3] ^ K[r][(i-1)*4 + 3];
    done;
  done;
      
*)

                                                    
    
